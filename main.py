#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YouTube Shorts Creator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏–∑ YouTube –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

–ê–≤—Ç–æ—Ä: SkvorikovCode
–ì–æ–¥: 2025
"""

import os
import sys
import json
import argparse
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –∏ –ò–ò
try:
    import yt_dlp
    import whisper
    import requests
    from colorama import init, Fore, Back, Style
    import ffmpeg
    from tqdm import tqdm
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–≤–µ—Ç–æ–≤
init(autoreset=True)

class ShortsCreator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏–∑ YouTube –≤–∏–¥–µ–æ"""
    
    def __init__(self, config_path: str = "config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config = self._load_config(config_path)
        self.setup_logging()
        self.setup_directories()
        self.whisper_model = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.stats = {
            "start_time": datetime.now(),
            "videos_processed": 0,
            "shorts_created": 0,
            "errors": 0
        }
        
        self.logger.info(f"üöÄ {self.config['app']['name']} v{self.config['app']['version']} –∑–∞–ø—É—â–µ–Ω")
    
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_config = self.config['logging']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
        formatter = logging.Formatter(log_config['format'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger('ShortsCreator')
        self.logger.setLevel(getattr(logging, log_config['level']))
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if log_config['file_logging']:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logs_dir = Path(self.config['paths']['logs_dir'])
            logs_dir.mkdir(parents=True, exist_ok=True)
            
            log_file = logs_dir / f"shorts_creator_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        for path_key, path_value in self.config['paths'].items():
            Path(path_value).mkdir(parents=True, exist_ok=True)
            self.logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path_value}")
    
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        banner = f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    YouTube Shorts Creator                    ‚ïë
‚ïë                   –ê–≤—Ç–æ—Ä: SkvorikovCode                       ‚ïë
‚ïë                        –ì–æ–¥: 2025                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
        """
        print(banner)
    
    def download_video(self, input_path: str) -> Optional[Dict]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ input_path –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
        if os.path.exists(input_path):
            return self._process_local_file(input_path)
        
        # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ YouTube URL
        self.logger.info(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {input_path}")
        url = input_path
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        ydl_opts = {
            'format': f'best[height<={self.config["video"]["video_quality"][:-1]}]',
            'outtmpl': os.path.join(self.config['paths']['temp_dir'], '%(title)s.%(ext)s'),
            'writesubtitles': True,
            'writeautomaticsub': True,
            'subtitleslangs': ['ru', 'en'],
            'ignoreerrors': True,
            'cookiesfrombrowser': ('chrome',),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –∏–∑ Chrome
            'extractor_retries': 3,
            'fragment_retries': 3,
        }
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –¥–ª—è cookies
            browsers = [('chrome',), ('firefox',), ('safari',), None]
            
            for browser in browsers:
                try:
                    if browser:
                        ydl_opts['cookiesfrombrowser'] = browser
                        self.logger.info(f"üç™ –ü—Ä–æ–±—É–µ–º cookies –∏–∑ {browser[0]}")
                    else:
                        ydl_opts.pop('cookiesfrombrowser', None)
                        self.logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ cookies")
                    
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
                        info = ydl.extract_info(url, download=False)
                        break  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        
                except Exception as e:
                    if browser:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cookies –∏–∑ {browser[0]}: {e}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ cookies: {e}")
                    if browser == browsers[-1]:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise e
                    continue
                
            if not info:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                return None
            
            video_info = {
                'id': info.get('id'),
                'title': info.get('title'),
                'duration': info.get('duration'),
                'description': info.get('description'),
                'uploader': info.get('uploader'),
                'upload_date': info.get('upload_date')
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            if not video_info['duration'] or not video_info['title']:
                self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)")
                return None
            
            self.logger.info(f"üì∫ –í–∏–¥–µ–æ: {video_info['title']} ({video_info['duration']} —Å–µ–∫)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if video_info['duration'] < self.config['video']['min_short_duration']:
                self.logger.warning("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shorts")
                return None
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
                
            # –ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            temp_dir = Path(self.config['paths']['temp_dir'])
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∏—Å–∫–∞
            search_patterns = [
                f"*{video_info['id']}*",
                f"*{video_info['title'][:20]}*" if video_info['title'] else None,
                "*.mp4", "*.webm", "*.mkv", "*.avi"
            ]
            
            video_files = []
            for pattern in search_patterns:
                if pattern:
                    files = list(temp_dir.glob(pattern))
                    if files:
                        video_files = files
                        break
            
            if video_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                video_file = max(video_files, key=lambda f: f.stat().st_mtime)
                video_info['file_path'] = str(video_file)
                self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {video_info['file_path']}")
                return video_info
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
                self.logger.debug(f"–ò—Å–∫–∞–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {temp_dir}")
                return None
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            self.stats['errors'] += 1
            return None
    
    def _process_local_file(self, file_path: str) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        self.logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        
        if not os.path.exists(file_path):
            self.logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
        try:
            probe = ffmpeg.probe(file_path)
            video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
            
            if not video_stream:
                self.logger.error("‚ùå –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
                return None
            
            duration = float(probe['format']['duration'])
            filename = os.path.basename(file_path)
            title = os.path.splitext(filename)[0]
            
            video_info = {
                'id': f"local_{hash(file_path)}",
                'title': title,
                'duration': duration,
                'description': f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {filename}",
                'uploader': 'Local File',
                'upload_date': None,
                'file_path': file_path
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            if not video_info['duration'] or not video_info['title']:
                self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ")
                return None
            
            self.logger.info(f"üì∫ –í–∏–¥–µ–æ: {video_info['title']} ({video_info['duration']:.1f} —Å–µ–∫)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if video_info['duration'] < self.config['video']['min_short_duration']:
                self.logger.warning("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shorts")
                return None
            
            return video_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def extract_audio_and_subtitles(self, video_info: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ"""
        self.logger.info("üéµ –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        if 'file_path' not in video_info or not video_info['file_path']:
            self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É")
            return {}
        
        video_path = video_info['file_path']
        
        if not os.path.exists(video_path):
            self.logger.error(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return {}
        
        audio_path = os.path.join(self.config['paths']['temp_dir'], f"{video_info['id']}_audio.wav")
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
            (
                ffmpeg
                .input(video_path)
                .output(audio_path, acodec='pcm_s16le', ac=1, ar='16000')
                .overwrite_output()
                .run(quiet=True)
            )
            
            self.logger.info(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Whisper
            if not self.whisper_model:
                self.logger.info("ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper...")
                self.whisper_model = whisper.load_model(self.config['ai']['whisper']['model'])
            
            self.logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            result = self.whisper_model.transcribe(audio_path)
            
            return {
                'audio_path': audio_path,
                'transcription': result['text'],
                'segments': result['segments']
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            self.stats['errors'] += 1
            return {}
    
    def analyze_content_with_ai(self, video_info: Dict, audio_data: Dict) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
        self.logger.info("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        content_summary = {
            'title': video_info['title'],
            'duration': video_info['duration'],
            'transcription': audio_data.get('transcription', ''),
            'segments': audio_data.get('segments', [])
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò
        prompt = self._create_analysis_prompt(content_summary)
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Ollama
            response = self._query_ollama(prompt)
            
            if response:
                # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
                segments = self._parse_ai_response(response, video_info['duration'])
                self.logger.info(f"‚úÖ –ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏–ª {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è shorts")
                return segments
            else:
                # Fallback: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
                return self._create_fallback_segments(video_info['duration'])
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ò–ò: {e}")
            self.stats['errors'] += 1
            return self._create_fallback_segments(video_info['duration'])
    
    def _create_analysis_prompt(self, content: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 60-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö shorts:

–ù–∞–∑–≤–∞–Ω–∏–µ: {content['title']}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {content['duration']} —Å–µ–∫—É–Ω–¥
–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {content['transcription'][:2000]}...

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{{
  "segments": [
    {{
      "start_time": 0,
      "end_time": 60,
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞",
      "relevance_score": 0.9
    }}
  ]
}}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 15 –¥–æ 60 —Å–µ–∫—É–Ω–¥
- –í—ã–±–∏—Ä–∞–π —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –ø–æ —Å–º—ã—Å–ª—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
- –ò–∑–±–µ–≥–∞–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
- –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
        """
    
    def _query_ollama(self, prompt: str) -> Optional[str]:
        """–ó–∞–ø—Ä–æ—Å –∫ Ollama API"""
        ollama_config = self.config['ai']['ollama']
        
        try:
            response = requests.post(
                f"{ollama_config['base_url']}/api/generate",
                json={
                    'model': ollama_config['model'],
                    'prompt': prompt,
                    'stream': False
                },
                timeout=ollama_config['timeout']
            )
            
            if response.status_code == 200:
                return response.json().get('response')
            else:
                self.logger.warning(f"‚ö†Ô∏è Ollama –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                return None
                
        except requests.exceptions.ConnectionError:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω.")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
            return None
    
    def _parse_ai_response(self, response: str, video_duration: int) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            
            if json_match:
                data = json.loads(json_match.group())
                segments = data.get('segments', [])
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                valid_segments = []
                for segment in segments:
                    if (segment.get('start_time', 0) >= 0 and 
                        segment.get('end_time', 0) <= video_duration and
                        segment.get('end_time', 0) - segment.get('start_time', 0) >= self.config['video']['min_short_duration']):
                        valid_segments.append(segment)
                
                return valid_segments[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò: {e}")
        
        return self._create_fallback_segments(video_duration)
    
    def _create_fallback_segments(self, duration: int) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò"""
        self.logger.info("üìê –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –¥–µ–ª–µ–Ω–∏–µ–º")
        
        segment_duration = self.config['video']['max_short_duration']
        segments = []
        duration = int(duration)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è range()
        
        for i in range(0, duration, segment_duration):
            end_time = min(i + segment_duration, duration)
            if end_time - i >= self.config['video']['min_short_duration']:
                segments.append({
                    'start_time': i,
                    'end_time': end_time,
                    'description': f'–°–µ–≥–º–µ–Ω—Ç {len(segments) + 1}',
                    'relevance_score': 0.5
                })
        
        return segments
    
    def create_shorts(self, video_info: Dict, segments: List[Dict]) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        if not segments:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shorts")
            return []
        
        self.logger.info(f"‚úÇÔ∏è –°–æ–∑–¥–∞–µ–º {len(segments)} –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤...")
        
        output_files = []
        
        if 'file_path' not in video_info or not video_info['file_path']:
            self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É")
            return []
        
        video_path = video_info['file_path']
        
        if not os.path.exists(video_path):
            self.logger.error(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        output_dir = Path(self.config['paths']['output_dir']) / self._sanitize_filename(video_info['title'])
        output_dir.mkdir(parents=True, exist_ok=True)
        
        for i, segment in enumerate(tqdm(segments, desc="–°–æ–∑–¥–∞–Ω–∏–µ shorts")):
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞
                if not isinstance(segment, dict) or 'start_time' not in segment or 'end_time' not in segment:
                    self.logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}")
                    self.stats['errors'] += 1
                    continue
                
                start_time = segment['start_time']
                end_time = segment['end_time']
                
                if start_time >= end_time or start_time < 0:
                    self.logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}: {start_time}-{end_time}")
                    self.stats['errors'] += 1
                    continue
                
                output_file = output_dir / f"short_{i+1:03d}.mp4"
                
                # –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
                (
                    ffmpeg
                    .input(video_path, ss=start_time, t=end_time - start_time)
                    .output(
                        str(output_file),
                        vcodec='libx264',
                        acodec='aac',
                        **{'crf': '23', 'preset': 'medium'}
                    )
                    .overwrite_output()
                    .run(quiet=True)
                )
                
                output_files.append(str(output_file))
                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω short: {output_file.name}")
                self.stats['shorts_created'] += 1
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ short {i+1}: {e}")
                self.stats['errors'] += 1
        
        return output_files
    
    def generate_metadata(self, video_info: Dict, segments: List[Dict], output_files: List[str]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö shorts"""
        self.logger.info("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è shorts...")
        
        metadata_dir = Path(self.config['paths']['output_dir']) / self._sanitize_filename(video_info['title']) / 'metadata'
        metadata_dir.mkdir(exist_ok=True)
        
        for i, (segment, output_file) in enumerate(zip(segments, output_files)):
            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò
                title, description = self._generate_short_metadata(video_info, segment)
                
                metadata = {
                    'original_video': {
                        'title': video_info['title'],
                        'url': video_info.get('url', ''),
                        'duration': video_info['duration']
                    },
                    'short': {
                        'file_path': output_file,
                        'start_time': segment['start_time'],
                        'end_time': segment['end_time'],
                        'duration': segment['end_time'] - segment['start_time'],
                        'title': title,
                        'description': description,
                        'relevance_score': segment.get('relevance_score', 0.5)
                    },
                    'generated_at': datetime.now().isoformat(),
                    'generator': f"{self.config['app']['name']} v{self.config['app']['version']}"
                }
                
                metadata_file = metadata_dir / f"short_{i+1:03d}_metadata.json"
                with open(metadata_file, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, ensure_ascii=False, indent=2)
                
                self.logger.debug(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_file.name}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è short {i+1}: {e}")
    
    def _generate_short_metadata(self, video_info: Dict, segment: Dict) -> Tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è short —á–µ—Ä–µ–∑ –ò–ò"""
        if not self.config['features']['auto_generate_titles']:
            return f"Short –∏–∑ {video_info['title']}", segment.get('description', '')
        
        prompt = f"""
–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ä–æ–ª–∏–∫–∞:

–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {video_info['title']}
–§—Ä–∞–≥–º–µ–Ω—Ç: {segment.get('description', '')}
–í—Ä–µ–º—è: {segment['start_time']}-{segment['end_time']} —Å–µ–∫

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: [–∫–æ—Ä–æ—Ç–∫–æ–µ —Ü–µ–ø–ª—è—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]
–û–ø–∏—Å–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤]
        """
        
        try:
            response = self._query_ollama(prompt)
            if response:
                lines = response.strip().split('\n')
                title = "Short –∏–∑ " + video_info['title'][:30]
                description = segment.get('description', '')
                
                for line in lines:
                    if line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ:'):
                        title = line.replace('–ù–∞–∑–≤–∞–Ω–∏–µ:', '').strip()
                    elif line.startswith('–û–ø–∏—Å–∞–Ω–∏–µ:'):
                        description = line.replace('–û–ø–∏—Å–∞–Ω–∏–µ:', '').strip()
                
                return title, description
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return f"Short –∏–∑ {video_info['title'][:30]}", segment.get('description', '')
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        return re.sub(r'[<>:"/\\|?*]', '_', filename)[:50]
    
    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.config['processing']['preserve_temp_files']:
            temp_dir = Path(self.config['paths']['temp_dir'])
            for file in temp_dir.glob('*'):
                try:
                    file.unlink()
                    self.logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file.name}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file.name}: {e}")
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        end_time = datetime.now()
        duration = end_time - self.stats['start_time']
        
        print(f"\n{Fore.GREEN}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:{Style.RESET_ALL}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        print(f"üìπ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {self.stats['videos_processed']}")
        print(f"‚úÇÔ∏è –°–æ–∑–¥–∞–Ω–æ shorts: {self.stats['shorts_created']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        if self.stats['shorts_created'] > 0:
            print(f"\n{Fore.CYAN}üéâ Shorts —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É: {self.config['paths']['output_dir']}{Style.RESET_ALL}")
    
    def process_video(self, url: str) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            video_info = self.download_video(url)
            if not video_info:
                return False
            
            video_info['url'] = url
            self.stats['videos_processed'] += 1
            
            # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            audio_data = self.extract_audio_and_subtitles(video_info)
            if not audio_data:
                return False
            
            # 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
            segments = self.analyze_content_with_ai(video_info, audio_data)
            if not segments:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏")
                return False
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤
            output_files = self.create_shorts(video_info, segments)
            if not output_files:
                return False
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if self.config['features']['auto_generate_descriptions']:
                self.generate_metadata(video_info, segments, output_files)
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            self.stats['errors'] += 1
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.cleanup_temp_files()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='YouTube Shorts Creator - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py https://www.youtube.com/watch?v=VIDEO_ID
  python main.py --config custom_config.json https://youtu.be/VIDEO_ID
  python main.py --help

–ê–≤—Ç–æ—Ä: SkvorikovCode (2025)
        """
    )
    
    parser.add_argument('input', help='URL YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--config', '-c', default='config.json', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--version', action='version', version='YouTube Shorts Creator 1.0.0')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        creator = ShortsCreator(args.config)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if args.verbose:
            creator.logger.setLevel(logging.DEBUG)
        
        # –í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞
        creator.print_banner()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        success = creator.process_video(args.input)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        creator.print_statistics()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
        sys.exit(130)
    except Exception as e:
        print(f"\n{Fore.RED}üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        sys.exit(1)

if __name__ == '__main__':
    main()